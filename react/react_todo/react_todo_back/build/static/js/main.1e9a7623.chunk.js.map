{"version":3,"sources":["TodoListForm.js","TodoListFormCollection.js","App.js","serviceWorker.js","index.js"],"names":["TodoListForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","withList","list","state","setName","name","id","todos","handleSubmit","bind","assertThisInitialized","handleListNameChange","handleTodoNameChange","handleTodoAddRMClick","loadSuccess","loadFail","doDelete","response","setState","alert","e","doUpdate","doCreate","preventDefault","fetch","method","body","JSON","stringify","headers","Content-Type","then","ok","json","Error","catch","_this2","destroy","deleteCallback","index","target","value","i","add","length","push","splice","deleteButton","_this3","react_default","a","createElement","type","onClick","onSubmit","onChange","map","todo","key","React","Component","TodoListFormCollection","loaded","lists","handleNewList","handleListDeleted","res","console","err","concat","toConsumableArray","splicedLists","src_TodoListForm","App","className","src_TodoListFormCollection","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e9a7623.chunk.js","sourcesContent":["import React from 'react';\n\nclass TodoListForm extends React.Component {\n  constructor(props) {\n    super(props);\n    var withList = props.list || {};\n    this.state = {\n      setName: withList.name || null,\n      id: withList.id || null,\n      name: withList.name || null,\n      todos: withList.todos || [{}]\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleListNameChange = this.handleListNameChange.bind(this);\n    this.handleTodoNameChange = this.handleTodoNameChange.bind(this);\n    this.handleTodoAddRMClick = this.handleTodoAddRMClick.bind(this);\n    this.loadSuccess = this.loadSuccess.bind(this);\n    this.loadFail = this.loadFail.bind(this);\n    this.doDelete = this.doDelete.bind(this);\n  }\n\n  loadSuccess(response) {\n    this.setState({\n      id: response.id,\n      name: response.name,\n      todos: response.todos,\n      setName: response.name,\n    })\n  }\n\n  loadFail() {\n    alert('Failed to Create or Save!')\n  }\n\n  handleSubmit(e) {\n    if (this.state.id) {\n      this.doUpdate();\n    } else {\n      this.doCreate();\n    }\n    e.preventDefault();\n  }\n\n  doUpdate() {\n    fetch('lists/' + this.state.id + '.json', {\n        method: 'post',\n        body: JSON.stringify(this.state),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      .then(function(response) {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error();\n        }\n      })\n      .then(this.loadSuccess)\n      .catch(this.loadFail)\n  }\n\n  doCreate() {\n    fetch('lists.json', {\n        method: 'post',\n        body: JSON.stringify(this.state),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      .then(function(response) {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error();\n        }\n      })\n      .then(this.loadSuccess)\n      .catch(this.loadFail)\n  }\n\n  doDelete() {\n    fetch('lists/' + this.state.id + '.json', {\n        method: 'post',\n        body: JSON.stringify({\n          destroy: true\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      .then(function(response) {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error();\n        }\n      })\n      .then(() => {\n        this.props.deleteCallback(this.props.index)\n      })\n      .catch(this.loadFail)\n  }\n\n  handleListNameChange(e) {\n    this.setState({ name: e.target.value });\n  }\n\n  handleTodoNameChange(i, name) {\n    this.setState(state => {\n      const todos = state.todos;\n      todos[i].name = name;\n      return {\n        todos: todos\n      }\n    })\n  }\n\n  handleTodoAddRMClick(i) {\n    var add = (i+1 === this.state.todos.length);\n    this.setState(state => {\n      let todos = state.todos;\n\n      if (add) {\n        todos.push({})\n      } else {\n        todos.splice(i, 1);\n      }\n\n      return {\n        todos: todos\n      }\n    });\n  }\n\n\n\n  render() {\n    let deleteButton;\n    if (this.state.id) {\n      deleteButton = <button type=\"button\" onClick={() => this.doDelete()}>DELETE</button>\n    }\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <h2>List {this.state.id}: {this.state.setName}</h2>\n        <input type=\"text\" onChange={this.handleListNameChange} value={this.state.name || ''} />\n        <div>\n          {\n            this.state.todos.map((todo, i) => {\n              return (\n                <div key={i}>\n                  Todo {i+1}:\n                  <input type=\"text\" onChange={(e) => this.handleTodoNameChange(i, e.target.value)} value={todo.name || ''} />\n                  <button type=\"button\" onClick={() => this.handleTodoAddRMClick(i)}>\n                    {i+1 === this.state.todos.length ? '+' : '-'}\n                  </button>\n                </div>\n              );\n            })\n          }\n          <button type=\"submit\">SAVE</button>\n          {deleteButton}\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default TodoListForm;","import React from 'react';\nimport TodoListForm from './TodoListForm.js'\n\nclass TodoListFormCollection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n\n      lists: []\n    }\n    this.loadSuccess = this.loadSuccess.bind(this);\n    this.handleNewList = this.handleNewList.bind(this);\n    this.handleListDeleted = this.handleListDeleted.bind(this);\n  }\n\n  componentWillMount() {\n    fetch('lists.json')\n      .then(function(res) {\n        return res.json();\n      })\n      .then(this.loadSuccess)\n      .catch(() => console.err('Failed to load collection of TodoLists'))\n  }\n\n  loadSuccess(response) {\n    this.setState({\n      loaded: true,\n\n      lists: response\n    })\n  }\n\n  handleNewList(e) {\n    this.setState({\n\n      lists: [...this.state.lists, {}]\n    })\n  }\n\n  handleListDeleted(index) {\n    const splicedLists = this.state.lists;\n    splicedLists.splice(index, 1);\n    this.setState({\n      lists: splicedLists\n    })\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      return (<div />)\n    }\n\n    return (\n      <div>\n        <div>\n          <button type=\"button\" onClick={this.handleNewList}>New List!</button>\n        </div>\n        {\n          this.state.lists.map( (list,i) => {\n            return (\n              <TodoListForm key={list.id} index={i} list={list} deleteCallback={this.handleListDeleted} />\n            );\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default TodoListFormCollection;","import React from 'react';\nimport './App.css';\nimport TodoListFormCollection from './TodoListFormCollection.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoListFormCollection />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}